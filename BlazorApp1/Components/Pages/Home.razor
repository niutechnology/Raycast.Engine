@page "/"

@rendermode RenderMode.InteractiveServer

@using Blazor.Extensions;
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D;
@using BlazorApp1.Models

<PageTitle>Raycast</PageTitle>
<div @onkeydown="HandleKeyDown" @onmousedown=HandleMouseMove>
    <BECanvas Width="1000" Height="800" @ref="_canvasReference"></BECanvas>
</div>

@code {
    Canvas2DContext _context;

    BECanvas _canvasReference { get; set; } = default!;
    System.Timers.Timer _timer;
    Character _character;
    private List<DrawCommand> drawCommands = new List<DrawCommand>();
    WorldMap MyMap = null!;

    private async Task HandleMouseMove(MouseEventArgs e)
    {
        // Atualize a posição alvo do personagem com a posição do mouse
        _character.TargetPosition = new Position((float)e.ClientX, (float)e.ClientY);
        await UpdateAndRedrawCharacter();
    }

    int[][] _worldMap = new int[][]{
        [1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 2, 2, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1],
        [1, 2, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
        [1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    };

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            this._context = await this._canvasReference.CreateCanvas2DAsync();

            this.MyMap = CreateMap(15, 15);
            await DrawMap();

            _character = new Character
                {
                    Position = new Position(50, 50),
                    Size = 30,
                    Color = "red",
                    MovementSpeed = 5
                };
            await _character.Draw(_context);

            this.StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (e.Key)
        {
            case "ArrowUp":
                _character.MoveUp();
                break;
            case "ArrowDown":
                _character.MoveDown();
                break;
            case "ArrowLeft":
                _character.MoveLeft();
                break;
            case "ArrowRight":
                _character.MoveRight();
                break;
        }
        await UpdateAndRedrawCharacter();
    }
}